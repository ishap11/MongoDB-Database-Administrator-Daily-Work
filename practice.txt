## 28-Jan-2025 --> Day 1 : Introduction to SQL & RDBMS and Software installation ##


-----------------------------------------------------------------------------------


## 29-Jan-2025 --> Day 2 : MongoDB Certification - Registeration process & SQL Sub Languages Introduction ##


----------------------------------------------------------------------------------


## 30-Jan-2025 --> Day 3 : Data Definition Language & Data Manipulation Language ##

SHOW DATABASES;
CREATE DATABASE VIT;
DROP DATABASE VIT;
USE VIT;
CREATE TABLE CSE (
  s_id INT, 
  s_name VARCHAR(30), 
  s_mark INT 
);
DROP TABLE CSE; 
SHOW TABLES FROM VIT;

SELECT * FROM CSE;
insert into cse values (1001,'Ram Prasad',99);
insert into cse values (1002,'Shubham',100);
insert into cse values (1003,'Anjali',95);
insert into cse values (1004,'Shubh',98);
insert into cse values (1005,'Palak',94);

ALTER TABLE CSE ADD ( 
  s_contact VARCHAR(200) 
);

SHOW DATABASES; 
USE VIT; 
SHOW TABLES FROM VIT; 
SELECT * FROM CSE; DESC CSE;

ALTER TABLE CSE DROP COLUMN s_contact;
INSERT INTO CSE VALUES (1002, 'Jayanth', 2008); 
INSERT INTO CSE VALUES (1001, 'Arin', 85, 'UK');
ALTER TABLE CSE ADD ( s_country VARCHAR(25) DEFAULT 'India' );

desc cse;

alter table cse drop column s_contact;

alter table cse add(
s_country varchar(50) default 'India'
);

insert into cse values (1006,'Shubham Raj Sharma',98,'USA');


----------------------------------------------------------------------------------------------------


## 31-Jan-2025 --> Day 4 : DCL and Transaction control language ##

USE VIT; 
ALTER TABLE CSE RENAME COLUMN s_country TO s_state; 
DESC CSE;

SELECT * FROM CSE; 
DELETE FROM CSE WHERE s_id = 102;

INSERT INTO CSE VALUES (1002, 'Jayanth', 75), (1003, 'Tsmilarasam', 76); 
UPDATE CSE SET s_name = 'Vishnu' WHERE s_id = 1002;
UPDATE CSE SET s_mark = s_mark + 1;

SELECT s_id, s_name 
FROM CSE 
WHERE s_id = 1002;

CREATE DATABASE Practice1; 
USE Practice1;

CREATE TABLE Mech ( s_id INT, s_name VARCHAR(25) );

START TRANSACTION; 
INSERT INTO Mech VALUES (101, 'Jayanth'); 
SAVEPOINT A;

UPDATE Mech SET s_id = 102 WHERE s_id = 101;
INSERT INTO Mech VALUES (102, 'Kanaya');

SELECT * FROM Mech;
SAVEPOINT C; 
SELECT * FROM Mech;

ROLLBACK TO SAVEPOINT A; 
SELECT * FROM Mech; 
COMMIT;


----------------------------------------------------------------------------------------------------------


## 1-Feb-2025 --> Day 5 :SQL Datatypes, Operators, Where Clause ##

CREATE DATABASE ORG123; 
SHOW DATABASES; 
USE ORG123;

CREATE TABLE Worker ( WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT, 
FIRST_NAME CHAR(25), 
LAST_NAME CHAR(25), 
SALARY INT, 
JOINING_DATE DATETIME, 
DEPARTMENT CHAR(25) );

A Server Logs,
Options File,
PERFORMANCE,
Dashboard,
Performance Reports,
Performance Schema Setup,

INSERT INTO Worker
 (WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) 
 VALUES 
 (001, ontks', 'Arora, 100000, 14-02-2019.00.00),
(002, harika", "Verma, 80000, 14-05-11 09.00.00', 'Adain), 
(003, Vishal", Singhal", 200000, 14-02-26 00.00.00,),
(Singh, 500000, 14-02-28 08.00.00 Adein),
(005, vek, Thati, 500000, 14-06-11 09.00.00", "A"),
(006, Vipul, Diwan, 200009, 14-06-11 49.00.00", "Account),
(007, Satish Kumar, 75000, 14-01-20 500.00 Account),
(on, Geetika", "Chauhan, 30000, 14-04-11 03.00.00 Adain),

SELECT * FROM Worker; 
SELECT * FROM Worker WHERE SALARY > 100000 AND DEPARTMENT = 'HR';
SELECT * FROM Worker WHERE SALARY > 2000000; 
SELECT * FROM Worker WHERE SALARY BETWEEN 1000000 AND 200000; 
SELECT * FROM Worker WHERE SALARY NOT BETWEEN 1000000 AND 200000; 
SELECT FIRST_NAME FROM Worker WHERE WORKER_ID IN (2, 4);

 SELECT FROM worker
 WHERE salary BETWEEN 200000 AND 400000
 AND WORKER ID in (1,2,3,4,5);
 desc worker;
 
SELECT MIN(SALARY) FROM Worker; 
SELECT MAX(SALARY) FROM Worker;

use org123;
select * from worker;
slecct distinct (department) from worker;

SELECT DEPARTMENT, FIRST_NAME, LAST_NAME, SALARY FROM Worker 
WHERE SALARY = (SELECT MAX(SALARY) FROM Worker);
SELECTworker_id , first_name , department ,

CASE

WHEN salary >3000000 THEN 'Rich people'

WHEN salary <= 300000 && salary >=100000THEN 'Middle stage '

ELSE 'poor people'

END

AS People_stage_wise

FROM worker;

select * from worker where department = 'Admin'order by department desc;

select department count(department) as total_employees from worker 
where department ='HR' or department 'Account' group by department;

select department ,count(department) as total_employees
FROM worker
GROUP BY department
ORDER BY total_employees DESC
LIMIT ALL;


select department ,count(department) as total_employees
FROM worker
GROUP BY department
ORDER BY total_employees DESC
LIMIT 1;

SELECT COUNT(WORKER_ID) FROM Worker; 
SELECT AVG(SALARY) FROM Worker; 
SELECT SUM(SALARY) FROM Worker;


---------------------------------------------------------------------------------------------


## 3-Feb-2025 --> Day 6 : SQL aggregate functions, Union, Union All operators ##

USE ORG123; 
SELECT DISTINCT(DEPARTMENT) FROM Worker;

==== Alias Example ==== 
SELECT WORKER_ID AS EMP_CODE FROM Worker;

==== UNION Example ====
SELECT WORKER_ID FROM Worker
UNION ALL 
SELECT FIRST_NAME FROM Worker;

SELECT DEPARTMENT, WORKER_ID
FROM Worker 
WHERE SALARY = 1000000 
UNION 
SELECT DEPARTMENT, WORKER_ID 
FROM Worker 
WHERE SALARY = 2000000 
ORDER BY WORKER_ID;

==== Case Statement Example =====
SELECT WORKER_ID, FIRST_NAME, DEPARTMENT, 
CASE
     WHEN SALARY > 1000000 THEN 'Rich People' 
     WHEN SALARY BETWEEN 500000 AND 1000000 
    THEN 'Middle Class' ELSE 'Poor People' 
END
AS People_Stage 
FROM Worker;


------------------------------------------------------------------------------------------------


## 4-Feb-2025 --> Day 7 : Order By, Group By and alias name and distinct ##

SELECT * FROM Worker 
WHERE DEPARTMENT = 'Admin' 
ORDER BY SALARY;

SELECT * FROM Worker 
WHERE DEPARTMENT = 'Admin' 
ORDER BY DEPARTMENT DESC; 

SELECT * FROM Worker 
WHERE DEPARTMENT = 'Admin' 
ORDER BY DEPARTMENT 
DESC LIMIT 1;

SELECT DEPARTMENT, COUNT(DEPARTMENT) AS TOTAL_EMPLOYEES FROM Worker 
WHERE DEPARTMENT IN ('HR', 'Admin') 
GROUP BY DEPARTMENT;

SELECT DEPARTMENT, COUNT(DEPARTMENT) AS TOTAL_EMPLOYEES 
FROM Worker 
GROUP BY DEPARTMENT 
ORDER BY TOTAL_EMPLOYEES 
DESC LIMIT 2;


----------------------------------------------------------------------------------------------------


## 6-Feb-2025 --> Day 8 : SQL Constraints (Unique, Not Null & Primary Key) ##

show databases;

order by-group by:

show databases;

use practise;

select * from worker where department = 'Admin' order by department desc;

select * from worker where department = 'Admin' order by department desc limit 3;

select department, count(DEPARTMENT) as total_employees  from worker 
where department = 'HR' or DEPARTMENT='account' group by department;

select department, count(department) as total_employees from worker
group by department
order by total_employees desc Limit 2;

(
  SELECT department, COUNT(department) AS total_employees
  FROM worker
  GROUP BY department
  ORDER BY total_employees ASC
  LIMIT 1
)

UNION ALL

(
  SELECT department, COUNT(department) AS total_employees
  FROM worker
  GROUP BY department
  ORDER BY total_employees DESC
  LIMIT 1
);


===== 3. Not Null-Primary key: ==========

use practise;

create table Persons (
	ID int PRIMARY KEY not null,
    first_name varchar(255) not null,
    last_name varchar(255) not null,
    Unique(ID)
);

desc persons;

create database org;

show databases;


use org123;
create table Persons(
ID int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255) NOT NULL,
Age int
);

desc persons;
ALTER TABLE Persons
modify AGE INT NOT NULL;

CREATE TABLE Persons1(
ID int Primary key,
LastName varchar(255) NOT NULL unique,
FirstName varchar(255) NOT NULL unique,
Age int
);
desc persons1;


-------------------------------------------------------------------------------------------------


## 7-Feb-2025--> Day 9 : Foreign Key and Mapping concepts ##

use practise;

create table category(
c_id int primary key,
c_name varchar(25) not null unique,
c_decrp varchar(250) not null
);

insert into category values (101, 'electronics', 'it stores all set of electronics items');
select * from category;
desc category;

CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id) on delete cascade
);

desc produsts ;

CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id) on delete cascade
);

insert into products values (904, 'INTEL I5 Processor', 101);
select * from products;

delete from category where c_id=101;
select * from category;


-----------------------------------------------------------------------------------------------------


## 8-Feb-2025 -->Day 10 : On delete cascade and on update cascade  ##

show databases;
use org123;

create table Student(
sno int primary key,
sname varchar(20),
age int
);

insert into Student(sno,sname,age)
values (1,'Ankit',17),
(2,'Ramya',18),
(3,'Ram',16);

create table Course(
cno int primary key,
cname varchar(20)
);

select from Course;
insert into Course(cno,cname)
values(101,'c'),
(102,'c++'),
(103,'DBMS');

CREATE TABLE Enorll (
    sno INT,
    cno INT,
    jdate date,
    PRIMARY KEY(sno , cno),
    FOREIGN KEY(sno),
        REFERENCES Stdudent(sno)
        ON DELETE CASCADE
    FOREIGN KEY(cno)
        REFERENCES Course(cno)
        ON DELETE CASCADE
);
INSERT INT0 Enroll(sno , cno, jdate) 
values(1 , 101 ,'5-jun-2021'),
(2 , 102 ,'6-jun-2021'),
(3 , 103 ,7-jun-2021'),
(5 , 105 ,'8-jun-2021');

Insert into Enroll(sno , cno , jdate)
values (1 , 101 , "2021/05.05");
select* from enroll;
desc enroll;

use practise;

create table category(
c_id int primary key,
c_name varchar(25) not null unique,
c_decrp varchar(250) not null
);

insert into category values (101, 'electronics', 'it stores all set of electronics items');
select * from category;
desc category;

CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id) on delete cascade
);

insert into products values (904, 'INTEL I5 Processor', 101);
select * from products;

delete from category where c_id=101;
select * from category;

select * from worker;

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');
        
SELECT department, COUNT(*) AS department_count
FROM worker
GROUP BY department
ORDER BY department_count DESC
LIMIT 1 OFFSET 1;

(SELECT * FROM Worker ORDER BY worker_ID DESC LIMIT 5)
ORDER BY worker_ID ASC;

desc worker;

CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);


INSERT INTO Title (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) 
VALUES
 (1, 'Manager', '2016-02-20 00:00:00'),
 (2, 'Executive', '2016-06-11 00:00:00'),
 (8, 'Executive', '2016-06-11 00:00:00'),
 (5, 'Manager', '2016-06-11 00:00:00'),
 (4, 'Asst. Manager', '2016-06-11 00:00:00'),
 (7, 'Executive', '2016-06-11 00:00:00'),
 (6, 'Lead', '2016-06-11 00:00:00'),
 (3, 'Lead', '2016-06-11 00:00:00');


-------------------------------------------------------------------------------------------------------------


## 9-Feb-2025--> Day 11 : Check, Default constraints and like operator and view statements ##

CREATE TABKE Persons (
    ID int NOT NULL;
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age >=18)
);

CREATE TABKE Persons (
    ID int NOT NULL;
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (salary >=200000 and salary <=400000)
);

ALTER TABLE Persons
ADD CHECK (Age >=18);

CREATE TABKE Persons1(
    ID int NOT NULL;
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    city varchar(255) DEFAULT 'coimbatore'
);
desc persons1;

use org123;
show tables from org123;

select * from worker ;
select * from worker where s_name LIKE '8%';

create  view [admin_more_salary] as
select * from worker where departs = "Admin" and salary >= 1000000 order by salary desc;

select * from admin_more_salary;


----------------------------------------------------------------------------------------------------------


## 10-Feb-2025--> Day12 : Having clause and sub query concepts ##

use org123;
select * from worker
select s_department , count(department) from worker 
where department in ('admin' , 'accoount') group by department;

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

SELECT department, count(department) as highest_head_count
FROM worker
GROUP BY department
HAVING COUNT (department) >= 3;

SELECT COUNT(CustomerID) as highest_head_count
FROM worker
GROUP BY department 
HAVING COUNT(department) >= 3;

SELECT departments, COUNT(*) as department_count
FROM worker
GROUp BY department
Order by department_count DESC
LIMIT 1 OFFSET 1;

create table vitBhopal (id int primary key , ame varchar(20) not nulll , department varchar(25) not null);
insert into vitBhopal values (104 , 'Karthik' , 'cs') , (103 , 'Arin' , 'ece');

create table vit (id int primary key , ame varchar(20) not nulll , college varchar(25) not null);
insert into vit values (104 , 'Karthik' , 'chennai') , (103 , 'Arin' , 'bhopal');
select * from vit;
select * from vitBhopal;

select name as winnerOfTheYear from vitBhopal 
where id = (select id form vit where college = 'Bhopal');


-------------------------------------------------------------------------------------------------------------


## 11-Feb-2025--> Day 13 : SQL Joins (Inner, Outer, Cross and Natural) ##

insert into vitbhopal values (104 , 'Karthik', 'cs') , (103 , 'Arun' , 'cs');

create table vit (id int primary key , name varchar(20) not null , college varchar(25) not null );
insert into vit values (104 , 'Karthik' , 'chennai'), (103 , 'Arun' , 'Bhopal');

select * from vit;

select name as WinnerOfTheYear frm vitbhopal
where id = (select id from vit where college='bhopal');

use org;
create table student(
    s_id int primary key,
    s_name varchar(25) not null,
    s_department varchar(25) not null
);

insert into student values (1001 , "Jayanth" , "ECE"),(1002 , "praveen" , "CSE") , (1003 , "Lokesh" , "Mech") , (1006 , "karthik" , "Aero"),(1007 , "Mahesh" , "CSE");

select * from student;
drop table vit;
create table VIT(
    s_id int primary key,
    s_cgpa varchar(5) not null
);
insert into vit values (1001 , '7.2') ,(1002 , '8.6') , (1007 , '9.25');
select * from vit;
use org123;

select  * from stident create join vit;

select * from student INNER JOIN vit where student.s_id = vit.s_id;

select * from student NATURALJOIN vit where student.s_id = vit.s_id;

select * from student LEFT OUTER JOIN vit on (student.s_id = vit.s_id);

select * from student FULL OUTER JOIN vit on (student.s_id = vit.s_id);

select * from student full JOIN vit;

select * from student FULL OUTER JOIN vit ON (student.s_id = vit.s_id);


---------------------------------------------------------------------------------------------------------------


## 12-Feb-2025-->Day 14 : Software installation and task submission ## 

/ Software installation and task submission


package practice1;

public class Testing1{
  public static void main(String[] args){
    System.out.println("Radhe Radhe");
  }
}


----------------------------------------------------------------------------------------------------------

## 13 Feb 2025 --> Day 15 : Recall of entire sql and evaluation

use org123;
select * from worker;

-- # Rest in test.txt


----------------------------------------------------------------------------------------------------------


## 14 Feb 2025 --> Day 16 : SQL JDBC Connection configuration

create database friday;
use friday;
show tables from friday;

create table student(id int, name varchar(20), location varchar(20));
insert into student values (101, 'Shubham','Samastipur'),(102,'Joy','Kolkata');

select *from student;

==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==

import java.sql.*;

public class JDBC{
  public static void main(String[] args){
    try{
      Class.forName("com.mysql.cj.jdbc.Driver");  // Register    // 1
      System.out.println("11111)
      Connection con = DriverManager.getConnection(
        "jdbc:mysql: // localhost:3306 /friday" , "root","root");
      //here sonoo is database name, root is username and password     // 2
      System.out.println("22222");
      Statement stmt = con.createStatement();   // 3
      System.out.println("33333");  
      ResultSet rs = stmt.executeQuery("select * from student");  // 4
  
      while(rs.next())
      System.out.println(rs.getInt(1)+ " " + rs.getString + " " + rs.getString(3) );
      }
      con.close();   //5
  
      }
    catch(Exception e){
      System.out.println("Shubham check your program, there is a small error");
    }
}


------------------------------------------------------------------------------------------------------------


## 15 Feb 2025 --> Day 17 : Create Operation through Java and SQL

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class CRUD_Test {
  public static void main(String[] args){
    CRUD_Test objTest = new CRUD_Test();

    objTest.create_data("1","Shubham","shubham@gmail.com");
    objTest.create_data("2","Shubham","shubhamraj@gmail.com");

  }

  public void create_data(String sl_no, String name, String email){
    DB_Connection obj_DB_Connection = new DB_Connection();
    Connection connection = obj_DB_Connection.connection();
    PreparedStatement ps = null;
    try{
      
      ps = connection.prepareStatement( "insert into user(sl_no, name, email) values (?,?,?)");
      ps.setString(1,sl_no);
      ps.setString(2,name);
      ps.setString(3,email);
      System.out.println(ps);
      ps.executeUpdate();
    } catch (Exception e){
      System.out.println(e);
    }
  }
}

==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==

create database saturday;
use saturday;
create table 'user'(
  'sl_no' INT(5) NULL DEFAULT NULL,
  'name' VARCHAR(100) NULL DEFAULT NULL,
  'email' VARCHAR(100) NULL DEFAULT NULL
);

select * from user;


create Database crud;
use crud;

create table user1(
  sl_no INT NULL DEFAULT NULL,
  name VARCHAR(100) NULL DEFAULT NULL,
  email VARCHAR(100) NULL DEFAULT NULL
  );

select * from user1  
    
==*==*==*==*==*==*==*==*==*==*==*==*==*==*==*==

import java.sql.Connection;
import java.sql.DriverManager;
public class CRUD_Test {
  public static void main(String[] args) {
    DB_Connection obj_DB_Connection = new DB_Connection();
    System.out.println(obj_DB_Connection.connection());
  }
  public Connection connection(){
    Connection connection = null;
    try{
      Class.forName("com.mysql.cj.jdbc.Driver");
      connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/saturday","root","root");
    } catch(Exception e){
      System.out.println(e);
    }
    return connection;
  }
}


----------------------------------------------------------------------------------------------------------------


## 17 Feb 2025 --> Day 18 : Update, Delete Operations through java and sql ##

package CRUD;
import java.sql.Connection;
import java.sql.DriverManager;
public class DB_Connection {
public static void main(String[] args) {
  DB_Connection obj_DB_Connection=new DB_Connection();
  System.out.println(obj_DB_Connection.get_connection());
}
public Connection get_connection(){
 Connection connection=null;
try {
  Class.forName("com.mysql.jdbc.Driver");              
  connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud","root", "root");
} catch (Exception e) {
  System.out.println(e);
}
  return connection;
}
}




CRUD_Test.java
package CRUD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
public class CRUD_Test {

public static void main(String[] args) {
	CRUD_Test objTest=new CRUD_Test();
        //insert data
	objTest.create_data("1", "jinu", "jinu@gmail.com");
	objTest.create_data("2", "jawad", "jawad@gmail.com");
        //read data
	objTest.read_data("2");
        //update data
	objTest.update_data("2", "22", "jawad2", "jawad2@gmail");
        //delete data
	objTest.delete_data("1");
}

public void create_data(String sl_no,String name,String email){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	try {
		String query="insert into user(sl_no,name,email) values (?,?,?)";
		ps=connection.prepareStatement(query);
		ps.setString(1, sl_no);
		ps.setString(2, name);
		ps.setString(3, email);
		System.out.println(ps);
		ps.executeUpdate();
	} catch (Exception e) {
		System.out.println(e);
	}
}

public void read_data(String sl_no){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	ResultSet rs=null;
	try {
		String query="select * from user";
		ps=connection.prepareStatement(query);
		//ps.setString(1, sl_no);
		System.out.println(ps);
		rs=ps.executeQuery();
		while(rs.next()){
		System.out.println("Sl no -"+rs.getString("sl_no"));
		System.out.println("name -"+rs.getString("name"));
		System.out.println("email -"+rs.getString("email"));
		System.out.println("---------------");
		}
	} catch (Exception e) {
		System.out.println(e);
	}
}

public void update_data(String sl_no,String new_sl_no,String name,String email){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	try {
		String query="update user set sl_no=?,name=?,email=? where sl_no=?";
		ps=connection.prepareStatement(query);
		ps.setString(1, new_sl_no);
		ps.setString(2, name);
		ps.setString(3, email);
		ps.setString(4, sl_no);
		System.out.println(ps);
		ps.executeUpdate();
	} catch (Exception e) {
		System.out.println(e);
	}
}

public void delete_data(String sl_no){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	try {
		String query="delete from user where sl_no=?";
		ps=connection.prepareStatement(query);
		ps.setString(1, sl_no);
		System.out.println(ps);
		ps.executeUpdate();
	} catch (Exception e) {
		System.out.println(e);
	}
}
}


-------------------------------------------------------------------------------------------------------------


## 18 Feb 2025 --> Day 19 : MongoDB Installation & Introduction ##


------------------------------------------------------------------------------------------------------------


# 19-Feb-2025--> Day 20 : Basic syntax, JSON & BSON format

- commonds of powershel and outputs:
-- show databases
-- admin                  40.00 KiB
-- config                 48.00 KiB
-- local                  96.00 KiB
-- orphanage_management  384.00 KiB
-- test                    8.00 KiB
-- vit                    40.00 KiB
-- use admin
-- switched to db admin
-- use vit
-- switched to db vit
-- show databases
-- admin                  40.00 KiB
-- config                 48.00 KiB
-- local                  96.00 KiB
-- orphanage_management  384.00 KiB
-- test                    8.00 KiB
-- vit                    40.00 KiB


-- Codes


-------------------------------------------------------------------------------------------------------------


## 20-Feb-2025 , 21-Feb-2025 , 22-Feb-2025 --> Session cancelled due to adVITya fest at college	 ##


--------------------------------------------------------------------------------------------------------------


# 24-Feb-2025--> Day 21 :MongoDB create, drop and find methods

show databases
admin                  40.00 KiB
config                 72.00 KiB
local                  96.00 KiB
orphanage_management  384.00 KiB
test                    8.00 KiB
vit                    24.00 KiB
use vit
already on db vit
switched to db vit
show databases
admin                  40.00 KiB
config                108.00 KiB
local                  96.00 KiB
orphanage_management  384.00 KiB
test                    8.00 KiB
vit                    24.00 KiB
db
vit
db.dropDatabase
[Function: dropDatabase] AsyncFunction {
  apiVersions: [ 1, Infinity ],
  returnsPromise: true,
  serverVersions: [ '0.0.0', '999.999.999' ],
  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],
  returnType: { type: 'unknown', attributes: {} },
  deprecated: false,
  platforms: [ 'Compass', 'Browser', 'CLI' ],
  isDirectShellCommand: false,
  acceptsRawInput: false,
  shellCommandCompleter: undefined,
  help: [Function (anonymous)] Help
}
db.dropDatabase()
{ ok: 1, dropped: 'vit' }
db
vit
use vit
already on db vit
use monday
switched to db monday
db.createCollection("Student")
{ ok: 1 }
show collections
Student
db.createCollection("Results")
{ ok: 1 }
show collections
Results
Student
db.Results.drop()
true
show automationNotices
null
show collections
Student
db.Student.insertOne({name : 'Isha' , location : 'Agra'})
{
  acknowledged: true,
  insertedId: ObjectId('67ddb69a114b3dd6162ae8ee')
}
db.Student.insertOne({name : 'barkha&Rishabh' , location : 'Agra'})
{
  acknowledged: true,
  insertedId: ObjectId('67ddb6fa114b3dd6162ae8ef')
}
db.Student.find()
{
  _id: ObjectId('67ddb69a114b3dd6162ae8ee'),
  name: 'Isha',
  location: 'Agra'
}
{
  _id: ObjectId('67ddb6fa114b3dd6162ae8ef'),
  name: 'barkha&Rishabh',
  location: 'Agra'
}
db.Student.deleteOne({name : 'Isha'})
{
  acknowledged: true,
  deletedCount: 1
}
db.Student.find()
{
  _id: ObjectId('67ddb6fa114b3dd6162ae8ef'),
  name: 'barkha&Rishabh',
  location: 'Agra'
}
monday


----------------------------------------------------------------------------------------------------------------


## 25-Feb-2025--> Day 22 : Mongodb data types, InsertOne & InsertMany and Update functions

db
monday
db.Students.find().pretty()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shubham Raj Sharma',
  location: 'Bihar'
}
-- db.Students.updateOne({name:'Shubham Raj Sharma'}, {$set:{'name':'Shubh'})
-- SyntaxError: Unexpected token, expected "," (1:73)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({name[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m {$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                          [31m[1m^[22m[39m[0m
-- db.Students.updateOne({'name':'Shubham Raj Sharma'}, {$set:{'name':'Shubh'})
-- SyntaxError: Unexpected token, expected "," (1:75)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({[32m'name'[39m[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m {$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                            [31m[1m^[22m[39m[0m
-- db.Students.updateOne({'name':'Shubham Raj Sharma'} {$set:{'name':'Shubh'})
-- SyntaxError: Unexpected token, expected "," (1:52)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({[32m'name'[39m[33m:[39m[32m'Shubham Raj Sharma'[39m} {$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                     [31m[1m^[22m[39m[0m
-- db.Students.updateOne({'name':'Shubham Raj Sharma'},{$set:{'name':'Shubh'})
-- SyntaxError: Unexpected token, expected "," (1:74)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({[32m'name'[39m[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m{$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                           [31m[1m^[22m[39m[0m
-- db.Students.updateOne({name:'Shubham Raj Sharma'},{$set:{'name':'Shubh'})
-- SyntaxError: Unexpected token, expected "," (1:72)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({name[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m{$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                         [31m[1m^[22m[39m[0m
db.Students.updateOne({name:'Shubham Raj Sharma'},{$set:{'name':'Shubh'}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db.Students.find()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shubh',
  location: 'Bihar'
}
db.Students.insertOne({})
{
  acknowledged: true,
  insertedId: ObjectId('67d9c0124528fa06b04ca584')
}
db.Students.insertOne({
-id :1,
name: "Joy"});
-- SyntaxError: Unexpected token (2:0)

-- [0m [90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39minsertOne({
-- [31m[1m>[22m[39m[90m 2 |[39m [33m-[39mid [33m:[39m[35m1[39m[33m,[39m
--  [90m   |[39m [31m[1m^[22m[39m
--  [90m 3 |[39m name[33m:[39m [32m"Joy"[39m})[33m;[39m[0m
db.Students.insertOne({
_id :1,
name: "Joy"});
{
  acknowledged: true,
  insertedId: 1
}
db.Students.find()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shubh',
  location: 'Bihar'
}
{
  _id: ObjectId('67d9c0124528fa06b04ca584')
}
{
  _id: 1,
  name: 'Joy'
}
db.Students.insertOne({
_id :null,
name: "Ujjwal"});
{
  acknowledged: true,
  insertedId: ObjectId('67d9c0bd4528fa06b04ca585')
}
db.Students.insertOne({
_id :null,
name: "Shubham"});
{
  acknowledged: true,
  insertedId: ObjectId('67d9c0c34528fa06b04ca586')
}
db.Students.find()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shubh',
  location: 'Bihar'
}
{
  _id: ObjectId('67d9c0124528fa06b04ca584')
}
{
  _id: 1,
  name: 'Joy'
}
{
  _id: ObjectId('67d9c0bd4528fa06b04ca585'),
  name: 'Ujjwal'
}
{
  _id: ObjectId('67d9c0c34528fa06b04ca586'),
  name: 'Shubham'
}
db.Students.insertOne([
  {title:"NoSQL Distilled",isbn:"0-4696-7030-4"},
  {title:"NoSQL in 7 Days",isbn: "0-4086-6859-8"},
  {title:"NoSQL Database",isbn:"0-2504-6932-4"}]);
{
  acknowledged: true,
  insertedId: ObjectId('67d9c1a24528fa06b04ca587')
}
db.Students.drop()
true
db.Books.insertMany([
  {title:"NoSQL Distilled",isbn:"0-4696-7030-4"},
  {title:"NoSQL in 7 Days",isbn: "0-4086-6859-8"},
  {title:"NoSQL Database",isbn:"0-2504-6932-4"}]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('67d9c1d44528fa06b04ca588'),
    '1': ObjectId('67d9c1d44528fa06b04ca589'),
    '2': ObjectId('67d9c1d44528fa06b04ca58a')
  }
}
db.Books.find()
{
  _id: ObjectId('67d9c1d44528fa06b04ca588'),
  title: 'NoSQL Distilled',
  isbn: '0-4696-7030-4'
}
{
  _id: ObjectId('67d9c1d44528fa06b04ca589'),
  title: 'NoSQL in 7 Days',
  isbn: '0-4086-6859-8'
}
{
  _id: ObjectId('67d9c1d44528fa06b04ca58a'),
  title: 'NoSQL Database',
  isbn: '0-2504-6932-4'
}
db.Books.drop()
true
db.Books.insertOne([
  {title:"NoSQL Distilled",isbn:"0-4696-7030-4"},
  {title:"NoSQL in 7 Days",isbn: "0-4086-6859-8"},
  {title:"NoSQL Database",isbn:"0-2504-6932-4"}]);
{
  acknowledged: true,
  insertedId: ObjectId('67d9c2074528fa06b04ca58b')
}
db.Books.find()
{
  '0': {
    title: 'NoSQL Distilled',
    isbn: '0-4696-7030-4'
  },
  '1': {
    title: 'NoSQL in 7 Days',
    isbn: '0-4086-6859-8'
  },
  '2': {
    title: 'NoSQL Database',
    isbn: '0-2504-6932-4'
  },
  _id: ObjectId('67d9c2074528fa06b04ca58b')
}
monday


-----------------------------------------------------------------------------------------------------------

## 26-Feb-2025--> Cancelled 


------------------------------------------------------------------------------------------------------------


## 27-Feb-2025--> Day 23 : MongoDB Find and FindOne operations ##

show databases
admin                  40.00 KiB
config                108.00 KiB
local                  96.00 KiB
monday                112.00 KiB
orphanage_management  384.00 KiB
test                    8.00 KiB
use monday
switched to db monday
-- db.products.insertMany([
--   {"_id":1,"name":"xPhone","price":799,"releaseDate":ISODate("2011-05-14"),"spac":{"ram":4,"screen":6.5,"cpu":2.66},"color":["white","black"],"storage":[64,128,256]},
-- ])
-- MongoBulkWriteError: E11000 duplicate key error collection: monday.products index: _id_ dup key: { _id: 1 }
-- db.products.insertMany([
-- {"_id":2,"name":"xPhone","price":899,"releaseDate":ISODate("2011-09-01"),"spac":{"ram":16,"screen":9.5,"cpu":2.66},"color":["white","black","purple"],"storage":[128,256,512]},
-- {"_id":3,"name":"xTablet","price":899,"releaseDate":ISODate("2015-01-14"),"spac":{"ram":12,"screen":9.7,"cpu":3.66},"color":["blue"],"storage":[16,64,128]},
-- {"_id":4,"name":"SmartPad","price":699,"releaseDate":ISODate("2020-05-14"),"spac":{"ram":8,"screen":9.7,"cpu":1.66},"color":["white","orange","gold","gray"],"storage":[128,256,1024]},
-- {"_id":5,"name":"SmartPhone","price":599,"releaseDate":ISODate("2022-09-14"),"spac":{"ram":4,"screen":5.7,"cpu":1.66},"color":["white","orange","gold","gray"],"storage":[128,256]}
-- ])
-- MongoBulkWriteError: E11000 duplicate key error collection: monday.products index: _id_ dup key: { _id: 2 }
db.products.insertMany([
  {"_id":1,"name":"xPhone","price":799,"releaseDate":ISODate("2011-05-14"),"spac":{"ram":4,"screen":6.5,"cpu":2.66},"color":["white","black"],"storage":[64,128,256]},
])
{
  acknowledged: true,
  insertedIds: {
    '0': 1
  }
}
db.products.insertMany([
{"_id":2,"name":"xPhone","price":899,"releaseDate":ISODate("2011-09-01"),"spac":{"ram":16,"screen":9.5,"cpu":2.66},"color":["white","black","purple"],"storage":[128,256,512]},
{"_id":3,"name":"xTablet","price":899,"releaseDate":ISODate("2015-01-14"),"spac":{"ram":12,"screen":9.7,"cpu":3.66},"color":["blue"],"storage":[16,64,128]},
{"_id":4,"name":"SmartPad","price":699,"releaseDate":ISODate("2020-05-14"),"spac":{"ram":8,"screen":9.7,"cpu":1.66},"color":["white","orange","gold","gray"],"storage":[128,256,1024]},
{"_id":5,"name":"SmartPhone","price":599,"releaseDate":ISODate("2022-09-14"),"spac":{"ram":4,"screen":5.7,"cpu":1.66},"color":["white","orange","gold","gray"],"storage":[128,256]}
])
{
  acknowledged: true,
  insertedIds: {
    '0': 2,
    '1': 3,
    '2': 4,
    '3': 5
  }
}
show collections
Books
products
db.Books.drop()
true
show collections 
products
db.products.find(pretty)
ReferenceError: pretty is not defined
db.products.find().pretty()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spac: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xPhone',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spac: {
    ram: 16,
    screen: 9.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'xTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spac: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spac: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spac: {
    ram: 4,
    screen: 5.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
db.products.findOne()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spac: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
db.products.findOne({'_id':2})
{
  _id: 2,
  name: 'xPhone',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spac: {
    ram: 16,
    screen: 9.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
db.products.findOne({'_id':3})
{
  _id: 3,
  name: 'xTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spac: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
db.products.findOne({'_id':4})
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spac: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
db.products.findOne({'_id':5})
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spac: {
    ram: 4,
    screen: 5.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
db.products.findOne({'_id':5},{name:1})
{
  _id: 5,
  name: 'SmartPhone'
}
db.products.findOne({'_id':5},{name:1},{price:2})
{
  _id: 5,
  name: 'SmartPhone'
}
db.products.findOne({'_id':5},{price:2})
{
  _id: 5,
  price: 599
}
db.products.findOne({'_id':5},{storage:6})
{
  _id: 5,
  storage: [
    128,
    256
  ]
}
db.products.findOne({'_id':5},{name:1},{price:1})
{
  _id: 5,
  name: 'SmartPhone'
}
db.products.findOne({'_id':5},{name:1,price:-500})
{
  _id: 5,
  name: 'SmartPhone',
  price: 599
}
db.products.findOne({'_id':5})
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spac: {
    ram: 4,
    screen: 5.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
db.Books.insertMany([
	{ "_id" : 1, "title" : "Unlocking Android", "isbn" : "1933988673", "categories" : [ "Open Source", "Mobile" ] },
	{ "_id" : 2, "title" : "Android in Action, Second Edition", "isbn" : "1935182722", "categories" : [ "Java" ] },
	{ "_id" : 3, "title" : "Specification by Example", "isbn" : "1617290084", "categories" : [ "Software Engineering" ] },
	{ "_id" : 4, "title" : "Flex 3 in Action", "isbn" : "1933988746", "categories" : [ "Internet" ] },
	{ "_id" : 5, "title" : "Flex 4 in Action", "isbn" : "1935182420", "categories" : [ "Internet" ] },
	{ "_id" : 6, "title" : "Collective Intelligence in Action", "isbn" : "1933988312", "categories" : [ "Internet" ] },
	{ "_id" : 7, "title" : "Zend Framework in Action", "isbn" : "1933988320", "categories" : [ "Web Development" ] },
	{ "_id" : 8, "title" : "Flex on Java", "isbn" : "1933988797", "categories" : [ "Internet" ] },
	{ "_id" : 9, "title" : "Griffon in Action", "isbn" : "1935182234", "categories" : [ "Java" ] },
	{ "_id" : 10, "title" : "OSGi in Depth", "isbn" : "193518217X", "categories" : [ "Java" ] },
	{ "_id" : 11, "title" : "Flexible Rails", "isbn" : "1933988509", "categories" : [ "Web Development" ] },
	{ "_id" : 13, "title" : "Hello! Flex 4", "isbn" : "1933988762", "categories" : [ "Internet" ] },
	{ "_id" : 14, "title" : "Coffeehouse", "isbn" : "1884777384", "categories" : [ "Miscellaneous" ] },
	{ "_id" : 15, "title" : "Team Foundation Server 2008 in Action", "isbn" : "1933988592", "categories" : [ "Microsoft .NET" ] },
	{ "_id" : 16, "title" : "Brownfield Application Development in .NET", "isbn" : "1933988711", "categories" : [ "Microsoft" ] },
	{ "_id" : 17, "title" : "MongoDB in Action", "isbn" : "1935182870", "categories" : [ "Next Generation Databases" ] },
	{ "_id" : 18, "title" : "Distributed Application Development with PowerBuilder 6.0", "isbn" : "1884777686", "categories" : [ "PowerBuilder" ] },
	{ "_id" : 19, "title" : "Jaguar Development with PowerBuilder 7", "isbn" : "1884777864", "categories" : [ "PowerBuilder", "Client-Server" ] },
	{ "_id" : 20, "title" : "Taming Jaguar", "isbn" : "1884777686", "categories" : [ "PowerBuilder" ] },
	{ "_id" : 21, "title" : "3D User Interfaces with Java 3D", "isbn" : "1884777902", "categories" : [ "Java", "Computer Graphics" ] },
	{ "_id" : 22, "title" : "Hibernate in Action", "isbn" : "193239415X", "categories" : [ "Java" ] },
	{ "_id" : 23, "title" : "Hibernate in Action (Chinese Edition)", "categories" : [ "Java" ] },
	{ "_id" : 24, "title" : "Java Persistence with Hibernate", "isbn" : "1932394885", "categories" : [ "Java" ] },
	{ "_id" : 25, "title" : "JSTL in Action", "isbn" : "1930110529", "categories" : [ "Internet" ] },
	{ "_id" : 26, "title" : "iBATIS in Action", "isbn" : "1932394826", "categories" : [ "Web Development" ] },
	{ "_id" : 27, "title" : "Designing Hard Software", "isbn" : "133046192", "categories" : [ "Object-Oriented Programming", "S" ] },
	{ "_id" : 28, "title" : "Hibernate Search in Action", "isbn" : "1933988649", "categories" : [ "Java" ] },
	{ "_id" : 29, "title" : "jQuery in Action", "isbn" : "1933988355", "categories" : [ "Web Development" ] },
	{ "_id" : 30, "title" : "jQuery in Action, Second Edition", "isbn" : "1935182323", "categories" : [ "Java" ] }
]);
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7,
    '7': 8,
    '8': 9,
    '9': 10,
    '10': 11,
    '11': 13,
    '12': 14,
    '13': 15,
    '14': 16,
    '15': 17,
    '16': 18,
    '17': 19,
    '18': 20,
    '19': 21,
    '20': 22,
    '21': 23,
    '22': 24,
    '23': 25,
    '24': 26,
    '25': 27,
    '26': 28,
    '27': 29,
    '28': 30
  }
}
db.Books.find()
{
  _id: 1,
  title: 'Unlocking Android',
  isbn: '1933988673',
  categories: [
    'Open Source',
    'Mobile'
  ]
}
{
  _id: 2,
  title: 'Android in Action, Second Edition',
  isbn: '1935182722',
  categories: [
    'Java'
  ]
}
{
  _id: 3,
  title: 'Specification by Example',
  isbn: '1617290084',
  categories: [
    'Software Engineering'
  ]
}
{
  _id: 4,
  title: 'Flex 3 in Action',
  isbn: '1933988746',
  categories: [
    'Internet'
  ]
}
{
  _id: 5,
  title: 'Flex 4 in Action',
  isbn: '1935182420',
  categories: [
    'Internet'
  ]
}
{
  _id: 6,
  title: 'Collective Intelligence in Action',
  isbn: '1933988312',
  categories: [
    'Internet'
  ]
}
{
  _id: 7,
  title: 'Zend Framework in Action',
  isbn: '1933988320',
  categories: [
    'Web Development'
  ]
}
{
  _id: 8,
  title: 'Flex on Java',
  isbn: '1933988797',
  categories: [
    'Internet'
  ]
}
{
  _id: 9,
  title: 'Griffon in Action',
  isbn: '1935182234',
  categories: [
    'Java'
  ]
}
{
  _id: 10,
  title: 'OSGi in Depth',
  isbn: '193518217X',
  categories: [
    'Java'
  ]
}
{
  _id: 11,
  title: 'Flexible Rails',
  isbn: '1933988509',
  categories: [
    'Web Development'
  ]
}
{
  _id: 13,
  title: 'Hello! Flex 4',
  isbn: '1933988762',
  categories: [
    'Internet'
  ]
}
{
  _id: 14,
  title: 'Coffeehouse',
  isbn: '1884777384',
  categories: [
    'Miscellaneous'
  ]
}
{
  _id: 15,
  title: 'Team Foundation Server 2008 in Action',
  isbn: '1933988592',
  categories: [
    'Microsoft .NET'
  ]
}
{
  _id: 16,
  title: 'Brownfield Application Development in .NET',
  isbn: '1933988711',
  categories: [
    'Microsoft'
  ]
}
{
  _id: 17,
  title: 'MongoDB in Action',
  isbn: '1935182870',
  categories: [
    'Next Generation Databases'
  ]
}
{
  _id: 18,
  title: 'Distributed Application Development with PowerBuilder 6.0',
  isbn: '1884777686',
  categories: [
    'PowerBuilder'
  ]
}
{
  _id: 19,
  title: 'Jaguar Development with PowerBuilder 7',
  isbn: '1884777864',
  categories: [
    'PowerBuilder',
    'Client-Server'
  ]
}
{
  _id: 20,
  title: 'Taming Jaguar',
  isbn: '1884777686',
  categories: [
    'PowerBuilder'
  ]
}
{
  _id: 21,
  title: '3D User Interfaces with Java 3D',
  isbn: '1884777902',
  categories: [
    'Java',
    'Computer Graphics'
  ]
}
Type "it" for more
db.Books.find({categories:'Java'},{title:10})
{
  _id: 2,
  title: 'Android in Action, Second Edition'
}
{
  _id: 9,
  title: 'Griffon in Action'
}
{
  _id: 10,
  title: 'OSGi in Depth'
}
{
  _id: 21,
  title: '3D User Interfaces with Java 3D'
}
{
  _id: 22,
  title: 'Hibernate in Action'
}
{
  _id: 23,
  title: 'Hibernate in Action (Chinese Edition)'
}
{
  _id: 24,
  title: 'Java Persistence with Hibernate'
}
{
  _id: 28,
  title: 'Hibernate Search in Action'
}
{
  _id: 30,
  title: 'jQuery in Action, Second Edition'
}
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spac: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xPhone',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spac: {
    ram: 16,
    screen: 9.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'xTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spac: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spac: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spac: {
    ram: 4,
    screen: 5.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
db.products.find({_id:1},{
name:1,
price:1,
"spec.screen":1
})
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
db.products.find({},{
name:1,
"inventory.qty":1
})
{
  _id: 1,
  name: 'xPhone'
}
{
  _id: 2,
  name: 'xPhone'
}
{
  _id: 3,
  name: 'xTablet'
}
{
  _id: 4,
  name: 'SmartPad'
}
{
  _id: 5,
  name: 'SmartPhone'
}
db.products.find({_id:1},{
releaseDate:0,
spec:0,
storage:0
})
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  spac: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ]
}


----------------------------------------------------------------------------------------------------------------


## 28-Feb-2025--> Day 24 : MongoDB Comparison Query Operators ##

use monday
already on db monday
show collections
Books
products
db.Books.drop()
true
db.products.drop()
true
show collections
db.products.insertMany([
    { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate": ISODate("2011-05-14"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 },"color":["white","black"],"storage":[64,128,256]},
    { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate": ISODate("2011-09-01") , "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 },"color":["white","black","purple"],"storage":[128,256,512]},
    { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate": ISODate("2015-01-14"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 },"color":["blue"],"storage":[16,64,128]},
    { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate": ISODate("2020-05-14"),"spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256,1024]},
    { "_id" : 5, "name" : "SmartPhone", "price" : 599,"releaseDate": ISODate("2022-09-14"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256]}
 ])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5
  }
}
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
-- db.products.find({price:{$eq:899},{name:1,price:1}})
-- SyntaxError: Unexpected token (1:34)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39mproducts[33m.[39mfind({price[33m:[39m{$eq[33m:[39m[35m899[39m}[33m,[39m{name[33m:[39m[35m1[39m[33m,[39mprice[33m:[39m[35m1[39m}})
--  [90m   |[39m                                   [31m[1m^[22m[39m[0m
db.products.find({price:{$eq:899}},{name:1,price:1})
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899
}
db.products.find({"spec.ram":{$eq:4}},{name:1,"spec.ram":1})
{
  _id: 1,
  name: 'xPhone',
  spec: {
    ram: 4
  }
}
{
  _id: 5,
  name: 'SmartPhone',
  spec: {
    ram: 4
  }
}
db.products.find({
color:{
$eq:"blue"}}
,{name:1,
color:1})
{
  _id: 3,
  name: 'SmartTablet',
  color: [
    'blue'
  ]
}
db.products.find({
releaseDate:{
$eq: new ISODate("2020-05-14")
}
},{
name:1,
releaseDate:1
})
{
  _id: 4,
  name: 'SmartPad',
  releaseDate: 2020-05-14T00:00:00.000Z
}
db.products.find({price:{$in:[699,799]}},{name:1,price:1})
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699
}
db.products.find({color:{$in:['green','white']}},{name:1,price:1})
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599
}
db.products.find({
color:{
$in:[/^g+/,/^w+/]}}
,{name:1,
color:1
})
{
  _id: 1,
  name: 'xPhone',
  color: [
    'white',
    'black'
  ]
}
{
  _id: 2,
  name: 'xTablet',
  color: [
    'white',
    'black',
    'purple'
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ]
}
monday
Selection deleted


---------------------------------------------------------------------------------------------------------


## 29-Feb-2025--> Cancelled


----------------------------------------------------------------------------------------------------------


## 1-March-2025--> Day 25: MoMongodb logical query operators  ##

show databases
admin                  40.00 KiB
config                 60.00 KiB
local                  96.00 KiB
monday                 40.00 KiB
orphanage_management  384.00 KiB
test                    8.00 KiB
monday
ReferenceError: monday is not defined
use monday
switched to db monday
show collections
products
db.products.insertMany([
	{ "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
	{ "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
	{ "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
	{ "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
	{ "_id" : 5, "name" : "SmartPhone", "price" : 599, "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] },
	{ "_id" : 6, "name" : "xWidget", "spec" : { "ram" : 64, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "black" ], "storage" : [ 1024 ] }
])
-- MongoBulkWriteError: E11000 duplicate key error collection: monday.products index: _id_ dup key: { _id: 1 }
monday


------------------------------------------------------------------------------------------------------------------------


## 2-March-2025 to 12March-2025--> cancelled


------------------------------------------------------------------------------------------------------------------------


## 13-March-2025--> Day 26: Array & Element based query operators  ##

use vit
switched to db vit
db.products.insertMany([
	{ "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
	{ "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
	{ "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
	{ "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
	{ "_id" : 5, "name" : "SmartPhone", "price" : 599, "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] },
	{ "_id" : 6, "name" : "xWidget", "spec" : { "ram" : 64, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "black" ], "storage" : [ 1024 ] },
	{ "_id" : 7, "name" : "xReader","price": null, "spec" : { "ram" : 64, "screen" : 6.7, "cpu" : 3.66 }, "color" : [ "black", "white" ], "storage" : [ 128 ] }
])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7
  }
}
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
{
  _id: 6,
  name: 'xWidget',
  spec: {
    ram: 64,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'black'
  ],
  storage: [
    1024
  ]
}
{
  _id: 7,
  name: 'xReader',
  price: null,
  spec: {
    ram: 64,
    screen: 6.7,
    cpu: 3.66
  },
  color: [
    'black',
    'white'
  ],
  storage: [
    128
  ]
}
db.products.find({price:{$exists:true},name:1,price:1})
db.products.find({price:{$exists:true}},{name:1,price:1})
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599
}
{
  _id: 7,
  name: 'xReader',
  price: null
}
db.products.find({price:{$exists:false}},{name:1,price:1})
{
  _id: 6,
  name: 'xWidget'
}
db.products.drop()
true
show collections
db.products.insertMany([
	{ "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
	{ "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
	{ "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
	{ "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
	{ "_id" : 5, "name" : "SmartPhone", "price" : 599, "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] },
	{ "_id" : 6, "name" : "xWidget", "spec" : { "ram" : 64, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "black" ], "storage" : [ 1024 ] },
	{ "_id" : 7, "name" : "xReader","price": null, "spec" : { "ram" : 64, "screen" : 6.7, "cpu" : 3.66 }, "color" : [ "black", "white" ], "storage" : [ 128 ] }
])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6,
    '6': 7
  }
}
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
{
  _id: 6,
  name: 'xWidget',
  spec: {
    ram: 64,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'black'
  ],
  storage: [
    1024
  ]
}
{
  _id: 7,
  name: 'xReader',
  price: null,
  spec: {
    ram: 64,
    screen: 6.7,
    cpu: 3.66
  },
  color: [
    'black',
    'white'
  ],
  storage: [
    128
  ]
}
db.products.drop()
true
show collections
db.products.insertMany([
	{ "_id" : 1, "name" : "xPhone", "price" : "799", "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
	{ "_id" : 2, "name" : "xTablet", "price" : NumberInt(899), "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
	{ "_id" : 3, "name" : "SmartTablet", "price" : NumberLong(899), "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
	{ "_id" : 4, "name" : "SmartPad", "price" : [599, 699, 799], "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
	{ "_id" : 5, "name" : "SmartPhone", "price" : ["599",699], "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] },
	{ "_id" : 6, "name" : "xWidget", "spec" : { "ram" : 64, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "black" ], "storage" : [ 1024 ] }
])
-- Warning: NumberLong: specifying a number as argument is deprecated and may lead to loss of precision, pass a string instead
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6
  }
}
show collections
products
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: '799',
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: [
    599,
    699,
    799
  ],
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: [
    '599',
    699
  ],
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
{
  _id: 6,
  name: 'xWidget',
  spec: {
    ram: 64,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'black'
  ],
  storage: [
    1024
  ]
}
db.products.find({
    price: {
        $type: "string"
    }
}, {
    name: 1,
    price: 1
})
{
  _id: 1,
  name: 'xPhone',
  price: '799'
}
{
  _id: 5,
  name: 'SmartPhone',
  price: [
    '599',
    699
  ]
}
db.products.find({
    price: {
        $type: 2
    }
}, {
    name: 1,
    price: 1
})
{
  _id: 1,
  name: 'xPhone',
  price: '799'
}
{
  _id: 5,
  name: 'SmartPhone',
  price: [
    '599',
    699
  ]
}
db.products.find({
    price: {
        $type: "number"
    }
}, {
    name: 1,
    price: 1
})
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899
}
{
  _id: 4,
  name: 'SmartPad',
  price: [
    599,
    699,
    799
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: [
    '599',
    699
  ]
}
db.products.find({
    price: {
        $type: "array"
    }
}, {
    name: 1,
    price: 1
})
{
  _id: 4,
  name: 'SmartPad',
  price: [
    599,
    699,
    799
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: [
    '599',
    699
  ]
}
db.products.find({
    price: {
        $type: ["number","string"]
    }
}, {
    name: 1,
    price: 1
})
{
  _id: 1,
  name: 'xPhone',
  price: '799'
}
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899
}
{
  _id: 4,
  name: 'SmartPad',
  price: [
    599,
    699,
    799
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: [
    '599',
    699
  ]
}
db.products.drop()
true
db.products.insertMany([
	{ "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
	{ "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
	{ "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
	{ "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
	{ "_id" : 5, "name" : "SmartPhone", "price" : 599, "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] },
	{ "_id" : 6, "name" : "xWidget", "spec" : { "ram" : 64, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "black" ], "storage" : [ 1024 ] }
])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5,
    '5': 6
  }
}
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
{
  _id: 6,
  name: 'xWidget',
  spec: {
    ram: 64,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'black'
  ],
  storage: [
    1024
  ]
}
db.products.find({
    color: {
        $size:2
    }
}, {
    name: 1,
    color: 1
})
{
  _id: 1,
  name: 'xPhone',
  color: [
    'white',
    'black'
  ]
}
db.products.drop()
true
db.products.insertMany([
	{ "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
	{ "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
	{ "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
	{ "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
	{ "_id" : 5, "name" : "SmartPhone", "price" : 599, "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] }
])
{
  acknowledged: true,
  insertedIds: {
    '0': 1,
    '1': 2,
    '2': 3,
    '3': 4,
    '4': 5
  }
}
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
db.products.find({color:{$all:["black","white"]}},{name:1,price:1})
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
db.products.find({color:{$all:["black","white"]}},{name:1,color:1})
{
  _id: 1,
  name: 'xPhone',
  color: [
    'white',
    'black'
  ]
}
{
  _id: 2,
  name: 'xTablet',
  color: [
    'white',
    'black',
    'purple'
  ]
}
db.products.find({
    $and:[{
color:"black"},
          {color:"white"}]
}, {
    name: 1,
    color: 1
})
{
  _id: 1,
  name: 'xPhone',
  color: [
    'white',
    'black'
  ]
}
{
  _id: 2,
  name: 'xTablet',
  color: [
    'white',
    'black',
    'purple'
  ]
}
vit


-----------------------------------------------------------------------------------------------------------


## 14-March-2025--> cancelled


------------------------------------------------------------------------------------------------------------


## 15-March-2025--> Day 27: Array Query Operators  ##

db.products.find({
'price':{
		$exists: 1}
},{
name: 1,
price: 1
})
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599
}
db.products
vit.products
db.products.insertMany([
    { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
    { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
    { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
    { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
    { "_id" : 5, "name" : "SmartPhone", "price" : 599, "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] },
    { "_id" : 6, "name" : "xWidget", "spec" : { "ram" : 64, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "black" ], "storage" : [ 1024 ] },
    { "_id" : 7, "name" : "xReader", "price" : null, "spec" : { "ram" : 64, "screen" : 6.7, "cpu" : 3.66 }, "color" : [ "black", "white" ], "storage" : [ 128 ] }
])
-- MongoBulkWriteError: E11000 duplicate key error collection: vit.products index: _id_ dup key: { _id: 1 }
db.products.find({
    'price': {
        $exists: 1
    }
}, {
    name: 1,
    price: 1
}).sort({
    price: 1
})
{
  _id: 5,
  name: 'SmartPhone',
  price: 599
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699
}
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
{
  _id: 2,
  name: 'xTablet',
  price: 899
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899
}
db.products.insertMany([
    { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate" : ISODate("2011-05-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 }, "color" : [ "white", "black" ], "storage" : [ 64, 128, 256 ] },
    { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate" : ISODate("2011-09-01T00:00:00Z"), "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 }, "color" : [ "white", "black", "purple" ], "storage" : [ 128, 256, 512 ] },
    { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate" : ISODate("2015-01-14T00:00:00Z"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "blue" ], "storage" : [ 16, 64, 128 ] },
    { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate" : ISODate("2020-05-14T00:00:00Z"), "spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256, 1024 ] },
    { "_id" : 5, "name" : "SmartPhone", "price" : 599, "releaseDate" : ISODate("2022-09-14T00:00:00Z"), "spec" : { "ram" : 4, "screen" : 9.7, "cpu" : 1.66 }, "color" : [ "white", "orange", "gold", "gray" ], "storage" : [ 128, 256 ] },
    { "_id" : 6, "name" : "xWidget", "spec" : { "ram" : 64, "screen" : 9.7, "cpu" : 3.66 }, "color" : [ "black" ], "storage" : [ 1024 ] },
    { "_id" : 7, "name" : "xReader", "price" : null, "spec" : { "ram" : 64, "screen" : 6.7, "cpu" : 3.66 }, "color" : [ "black", "white" ], "storage" : [ 128 ] }
])
-- MongoBulkWriteError: E11000 duplicate key error collection: vit.products index: _id_ dup key: { _id: 1 }
db.products.find({}, {
    name: 1,
    price: 1
}).sort({
    price: -1,
    name: 1
}).skip(2).limit(2);
{
  _id: 1,
  name: 'xPhone',
  price: 799
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699
}
db.products.find()
{
  _id: 1,
  name: 'xPhone',
  price: 799,
  releaseDate: 2011-05-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 6.5,
    cpu: 2.66
  },
  color: [
    'white',
    'black'
  ],
  storage: [
    64,
    128,
    256
  ]
}
{
  _id: 2,
  name: 'xTablet',
  price: 899,
  releaseDate: 2011-09-01T00:00:00.000Z,
  spec: {
    ram: 16,
    screen: 9.5,
    cpu: 3.66
  },
  color: [
    'white',
    'black',
    'purple'
  ],
  storage: [
    128,
    256,
    512
  ]
}
{
  _id: 3,
  name: 'SmartTablet',
  price: 899,
  releaseDate: 2015-01-14T00:00:00.000Z,
  spec: {
    ram: 12,
    screen: 9.7,
    cpu: 3.66
  },
  color: [
    'blue'
  ],
  storage: [
    16,
    64,
    128
  ]
}
{
  _id: 4,
  name: 'SmartPad',
  price: 699,
  releaseDate: 2020-05-14T00:00:00.000Z,
  spec: {
    ram: 8,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256,
    1024
  ]
}
{
  _id: 5,
  name: 'SmartPhone',
  price: 599,
  releaseDate: 2022-09-14T00:00:00.000Z,
  spec: {
    ram: 4,
    screen: 9.7,
    cpu: 1.66
  },
  color: [
    'white',
    'orange',
    'gold',
    'gray'
  ],
  storage: [
    128,
    256
  ]
}
vit





























------------------------------------------------------------------------------------------------------------


## 1-April-2025 to 4-APril-2025 --> Day 39 - Day 42 : Replication, replica set , Project details and github details , Replication Handson Practice  ##

CREATE TABLE Worker (

WORKER ID INT NOT NULL PRIMARY KEY AUTO INCREMENT,

FIRST NAME CHAR (25),

LAST NAME CHAR(25),

SALARY INT(15),

JOINING DATE DATETIME,

DEPARTMENT CHAR(25),

A Server Logs,
Options File,
PERFORMANCE,
Dashboard,
Performance Reports,
Performance Schema Setup,
INSERT INTO Worker,

(WORKER ID, FIRST NAME, LAST NAME, SALARY, JOINING DATE, DEPARTMENT)

VALUES,

(001, ontks', 'Arora, 100000, 14-02-2019.00.00),
(002, harika", "Verma, 80000, 14-05-11 09.00.00', 'Adain), 
(003, Vishal", Singhal", 200000, 14-02-26 00.00.00,),
(Singh, 500000, 14-02-28 08.00.00 Adein),
(005, vek, Thati, 500000, 14-06-11 09.00.00", "A"),
(006, Vipul, Diwan, 200009, 14-06-11 49.00.00", "Account),
(007, Satish Kumar, 75000, 14-01-20 500.00 Account),
(on, Geetika", "Chauhan, 30000, 14-04-11 03.00.00 Adain),

SELECT *FROM worker 
WHERE slary  not BETWEEN 100000 AND 200000;
slect first_Name from worker where 

SELECT FROM Worker WHERE SALARY=100000 AND DEPARTMENT = HRS

 SELECT FROM Worker WHERE SALARY > 200000;

 SELECT FROM Worker WHERE SALARY=100008 AND DEPARTMENTHR

 SELECT FROM Worker WHERE SALARY between 100000 AND 200000;

 SELECT FROM Worker WHERE SALARY not between 100000 AND 200000;

 SELECT FROM worker
 WHERE salary BETWEEN 200000 AND 400000
 AND WORKER ID in (1,2,3,4,5);
 desc worker;
 
use org123;
select * from worker;
slecct distinct (department) from worker;

SELECTworker_id , first_name , department ,

CASE

WHEN salary >3000000 THEN 'Rich people'

WHEN salary <= 300000 && salary >=100000THEN 'Middle stage '

ELSE 'poor people'

END

AS People_stage_wise

FROM worker;

select * from worker where department = 'Admin'order by department desc;

select department count(department) as total_employees from worker 
where department ='HR' or department 'Account' group by department;

select department ,count(department) as total_employees
FROM worker
GROUP BY department
ORDER BY total_employees DESC
LIMIT ALL;


select department ,count(department) as total_employees
FROM worker
GROUP BY department
ORDER BY total_employees DESC
LIMIT 1;

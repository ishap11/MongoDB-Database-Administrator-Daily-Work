# 28-Jan-2025 --> Day 1 : Introduction to SQL & RDBMS and Software installation


# 29-Jan-2025 --> Day 2 : MongoDB Certification - Registeration process & SQL Sub Languages Introduction


# 30-Jan-2025 --> Day 3 : Data Definition Language & Data Manipulation Language

SHOW DATABASES; CREATE DATABASE VIT; DROP DATABASE VIT;
USE VIT;
CREATE TABLE CSE ( s_id INT, s_name VARCHAR(30), s_mark INT );
DROP TABLE CSE; 
SHOW TABLES FROM VIT;

SELECT * FROM CSE;
INSERT INTO CSE VALUES (1001, 'Ram Prasad', 99);
ALTER TABLE CSE ADD ( s_contact VARCHAR(200) );

SHOW DATABASES; 
USE VIT; 
SHOW TABLES FROM VIT; 
SELECT * FROM CSE; DESC CSE;

ALTER TABLE CSE DROP COLUMN s_contact;
INSERT INTO CSE VALUES (1002, 'Jayanth', 2008); 
INSERT INTO CSE VALUES (1001, 'Arin', 85, 'UK');
ALTER TABLE CSE ADD ( s_country VARCHAR(25) DEFAULT 'India' );


# 31-Jan-2025 --> Day 4 : DCL and Transaction control language

USE VIT; 
ALTER TABLE CSE RENAME COLUMN s_country TO s_state; 
DESC CSE;

SELECT * FROM CSE; 
DELETE FROM CSE WHERE s_id = 102;

INSERT INTO CSE VALUES (1002, 'Jayanth', 75), (1003, 'Tsmilarasam', 76); 
UPDATE CSE SET s_name = 'Vishnu' WHERE s_id = 1002;
UPDATE CSE SET s_mark = s_mark + 1;

SELECT s_id, s_name 
FROM CSE 
WHERE s_id = 1002;

CREATE DATABASE Practice1; 
USE Practice1;

CREATE TABLE Mech ( s_id INT, s_name VARCHAR(25) );

START TRANSACTION; 
INSERT INTO Mech VALUES (101, 'Jayanth'); 
SAVEPOINT A;

UPDATE Mech SET s_id = 102 WHERE s_id = 101;
INSERT INTO Mech VALUES (102, 'Kanaya');

SELECT * FROM Mech;
SAVEPOINT C; 
SELECT * FROM Mech;

ROLLBACK TO SAVEPOINT A; 
SELECT * FROM Mech; 
COMMIT;


# 1-Feb-2025 --> Day 5 :SQL Datatypes, Operators, Where Clause

CREATE DATABASE ORG123; 
SHOW DATABASES; 
USE ORG123;

CREATE TABLE Worker ( WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT, FIRST_NAME CHAR(25), LAST_NAME CHAR(25), SALARY INT, JOINING_DATE DATETIME, DEPARTMENT CHAR(25) );

INSERT INTO Worker (WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES (1, 'Isha', 'Prajapati', 1000000, '2020-02-14 09:00:00', 'SWE'), (2, 'Niharika', 'Verma', 80000, '2011-06-14 09:00:00', 'Admin'), (3, 'Vishal', 'Singhal', 1000, '2020-02-15 09:00:00', 'HR'), (4, 'Barkha', 'Prajapati', 100000, '2020-02-12 09:00:00', 'SWE');

SELECT * FROM Worker; 
SELECT * FROM Worker WHERE SALARY > 100000 AND DEPARTMENT = 'HR';
SELECT * FROM Worker WHERE SALARY > 2000000; 
SELECT * FROM Worker WHERE SALARY BETWEEN 1000000 AND 200000; 
SELECT * FROM Worker WHERE SALARY NOT BETWEEN 1000000 AND 200000; 
SELECT FIRST_NAME FROM Worker WHERE WORKER_ID IN (2, 4);

SELECT MIN(SALARY) FROM Worker; 
SELECT MAX(SALARY) FROM Worker;

SELECT DEPARTMENT, FIRST_NAME, LAST_NAME, SALARY FROM Worker WHERE SALARY = (SELECT MAX(SALARY) FROM Worker);

SELECT COUNT(WORKER_ID) FROM Worker; 
SELECT AVG(SALARY) FROM Worker; 
SELECT SUM(SALARY) FROM Worker;


# 3-Feb-2025 --> Day 6 : SQL aggregate functions, Union, Union All operators

USE ORG123; 
SELECT DISTINCT(DEPARTMENT) FROM Worker;

-- Alias Example 
SELECT WORKER_ID AS EMP_CODE FROM Worker;

-- UNION Example 
SELECT WORKER_ID FROM Worker
UNION ALL 
SELECT FIRST_NAME FROM Worker;

SELECT DEPARTMENT, WORKER_ID
FROM Worker 
WHERE SALARY = 1000000 
UNION 
SELECT DEPARTMENT, WORKER_ID 
FROM Worker 
WHERE SALARY = 2000000 
ORDER BY WORKER_ID;

-- Case Statement Example 
SELECT WORKER_ID, FIRST_NAME, DEPARTMENT, 
CASE
     WHEN SALARY > 1000000 THEN 'Rich People' 
     WHEN SALARY BETWEEN 500000 AND 1000000 
    THEN 'Middle Class' ELSE 'Poor People' 
END
AS People_Stage 
FROM Worker;


# 4-Feb-2025 --> Day 7 : Order By, Group By and alias name and distinct

SELECT * FROM Worker 
WHERE DEPARTMENT = 'Admin' 
ORDER BY SALARY;

SELECT * FROM Worker 
WHERE DEPARTMENT = 'Admin' 
ORDER BY DEPARTMENT DESC; 

SELECT * FROM Worker 
WHERE DEPARTMENT = 'Admin' 
ORDER BY DEPARTMENT 
DESC LIMIT 1;

SELECT DEPARTMENT, COUNT(DEPARTMENT) AS TOTAL_EMPLOYEES FROM Worker 
WHERE DEPARTMENT IN ('HR', 'Admin') 
GROUP BY DEPARTMENT;

SELECT DEPARTMENT, COUNT(DEPARTMENT) AS TOTAL_EMPLOYEES 
FROM Worker 
GROUP BY DEPARTMENT 
ORDER BY TOTAL_EMPLOYEES 
DESC LIMIT 2;


# 6-Feb-2025 --> Day 8 : SQL Constraints (Unique, Not Null & Primary Key)

show databases;

order by-group by:

show databases;

use practise;

select * from worker where department = 'Admin' order by department desc;

select * from worker where department = 'Admin' order by department desc limit 3;

select department, count(DEPARTMENT) as total_employees  from worker 
where department = 'HR' or DEPARTMENT='account' group by department;

select department, count(department) as total_employees from worker
group by department
order by total_employees desc Limit 2;

(
  SELECT department, COUNT(department) AS total_employees
  FROM worker
  GROUP BY department
  ORDER BY total_employees ASC
  LIMIT 1
)

UNION ALL

(
  SELECT department, COUNT(department) AS total_employees
  FROM worker
  GROUP BY department
  ORDER BY total_employees DESC
  LIMIT 1
);


3. Not Null-Primary key:

use practise;

create table Persons (
	ID int PRIMARY KEY not null,
    first_name varchar(255) not null,
    last_name varchar(255) not null,
    Unique(ID)
);

desc persons;


# 7-Feb-2025--> Day 9 : Foreign Key and Mapping concepts

use practise;

create table category(
c_id int primary key,
c_name varchar(25) not null unique,
c_decrp varchar(250) not null
);

insert into category values (101, 'electronics', 'it stores all set of electronics items');
select * from category;
desc category;

CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id) on delete cascade
);

desc produsts ;

CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id) on delete cascade
);

insert into products values (904, 'INTEL I5 Processor', 101);
select * from products;

delete from category where c_id=101;
select * from category;


# 8-Feb-2025 -->Day 10 : On delete cascade and on update cascade 

CREATE TABLE Enorll (
    sno INT,
    cno INT,
    jdate date,
    PRIMARY KEY(sno , cno),
    FOREIGN KEY(sno),
        REFERENCES Stdudent(sno)
        ON DELETE CASCADE
    FOREIGN KEY(cno)
        REFERENCES Course(cno)
        ON DELETE CASCADE
);
INSERT INT0 Enroll(sno , cno, jdate) values(1 , 101 ,'5-jun-2021'),(2 , 102 ,'6-jun-2021'),(3 , 103 ,7-jun-2021'),(5 , 105 ,'8-jun-2021');

Insert into Enroll(sno , cno , jdate)
values (1 , 101 , "2021/05.05");
select* from enroll;
desc enroll;

use practise;

create table category(
c_id int primary key,
c_name varchar(25) not null unique,
c_decrp varchar(250) not null
);

insert into category values (101, 'electronics', 'it stores all set of electronics items');
select * from category;
desc category;

CREATE TABLE Products (
    P_ID int primary key,
    p_Name varchar(250) NOT NULL,
    c_id int ,
    CONSTRAINT c_id FOREIGN KEY (c_id)
    REFERENCES category(c_id) on delete cascade
);

insert into products values (904, 'INTEL I5 Processor', 101);
select * from products;

delete from category where c_id=101;
select * from category;

select * from worker;

CREATE TABLE Bonus (
	WORKER_REF_ID INT,
	BONUS_AMOUNT INT(10),
	BONUS_DATE DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);

INSERT INTO Bonus 
	(WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
		(001, 5000, '16-02-20'),
		(002, 3000, '16-06-11'),
		(003, 4000, '16-02-20'),
		(001, 4500, '16-02-20'),
		(002, 3500, '16-06-11');
        
SELECT department, COUNT(*) AS department_count
FROM worker
GROUP BY department
ORDER BY department_count DESC
LIMIT 1 OFFSET 1;

(SELECT * FROM Worker ORDER BY worker_ID DESC LIMIT 5)
ORDER BY worker_ID ASC;

desc worker;

CREATE TABLE Title (
	WORKER_REF_ID INT,
	WORKER_TITLE CHAR(25),
	AFFECTED_FROM DATETIME,
	FOREIGN KEY (WORKER_REF_ID)
		REFERENCES Worker(WORKER_ID)
        ON DELETE CASCADE
);


INSERT INTO Title (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) 
VALUES
 (1, 'Manager', '2016-02-20 00:00:00'),
 (2, 'Executive', '2016-06-11 00:00:00'),
 (8, 'Executive', '2016-06-11 00:00:00'),
 (5, 'Manager', '2016-06-11 00:00:00'),
 (4, 'Asst. Manager', '2016-06-11 00:00:00'),
 (7, 'Executive', '2016-06-11 00:00:00'),
 (6, 'Lead', '2016-06-11 00:00:00'),
 (3, 'Lead', '2016-06-11 00:00:00');


# 9-Feb-2025--> Day 11 : Check, Default constraints and like operator and view statements

CREATE TABKE Persons (
    ID int NOT NULL;
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (Age >=18)
);

CREATE TABKE Persons (
    ID int NOT NULL;
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    CHECK (salary >=200000 and salary <=400000)
);

ALTER TABLE Persons
ADD CHECK (Age >=18);

CREATE TABKE Persons1(
    ID int NOT NULL;
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    city varchar(255) DEFAULT 'coimbatore'
);
desc persons1;

use org123;
show tables from org123;

select * from worker ;
select * from worker where s_name LIKE '8%';

create  view [admin_more_salary] as
select * from worker where departs = "Admin" and salary >= 1000000 order by salary desc;

select * from admin_more_salary;


# 10-Feb-2025--> Day12 : Having clause and sub query concepts

use org123;
select s_department , count(department) from worker where department in ('admin' , 'accoount') group by department;

SELECT COUNT(CustomerID) as highest_head_count
FROM worker
GROUP BY department 
HAVING COUNT(department) >= 3;

SELECT departments, COUNT(*) as department_count
FROM worker
GROUp BY department
Order by department_count DESC
LIMIT 1 OFFSET 1;

create table vitBhopal (id int primary key , ame varchar(20) not nulll , department varchar(25) not null);
insert into vitBhopal values (104 , 'Karthik' , 'cs') , (103 , 'Arin' , 'ece');

create table vit (id int primary key , ame varchar(20) not nulll , college varchar(25) not null);
insert into vit values (104 , 'Karthik' , 'chennai') , (103 , 'Arin' , 'bhopal');
select * from vit;
select * from vitBhopal;

select name as winnerOfTheYear from vitBhopal 
where id = (select id form vit where college = 'Bhopal');


# 11-Feb-2025--> Day 13 : SQL Joins (Inner, Outer, Cross and Natural)

insert into vitbhopal values (104 , 'Karthik', 'cs') , (103 , 'Arun' , 'cs');

create table vit (id int primary key , name varchar(20) not null , college varchar(25) not null );
insert into vit values (104 , 'Karthik' , 'chennai'), (103 , 'Arun' , 'Bhopal');

select * from vit;

select name as WinnerOfTheYear frm vitbhopal
where id = (select id from vit where college='bhopal');

use org;
create table student(
    s_id int primary key,
    s_name varchar(25) not null,
    s_department varchar(25) not null
);

insert into student values (1001 , "Jayanth" , "ECE"),(1002 , "praveen" , "CSE") , (1003 , "Lokesh" , "Mech") , (1006 , "karthik" , "Aero"),(1007 , "Mahesh" , "CSE");

select * from student;
drop table vit;
create table VIT(
    s_id int primary key,
    s_cgpa varchar(5) not null
);
insert into vit values (1001 , '7.2') ,(1002 , '8.6') , (1007 , '9.25');
select * from vit;
use org123;

select  * from stident create join vit;

select * from student INNER JOIN vit where student.s_id = vit.s_id;

select * from student NATURALJOIN vit where student.s_id = vit.s_id;

select * from student LEFT OUTER JOIN vit on (student.s_id = vit.s_id);

select * from student FULL OUTER JOIN vit on (student.s_id = vit.s_id);


#12-Feb-2025-->Day 14 : Software installation and task submission














# 19-Feb-2025--> Day 20 : Basic syntax, JSON & BSON format
show databases
admin   40.00 KiB
config  12.00 KiB
local   72.00 KiB
use admin
switched to db admin
use vit
switched to db vit
show databases
admin   40.00 KiB
config  60.00 KiB
local   72.00 KiB


#20-Feb-2025 , 21-Feb-2025 , 22-Feb-2025 --> Session cancelled due to adVITya fest at college	


# 24-Feb-2025--> Day 21 :MongoDB create, drop and find methods

show databases
admin   40.00 KiB
config  48.00 KiB
local   72.00 KiB
use vit
already on db vit
db
vit
db.dropDatabase()
{ ok: 1, dropped: 'vit' }
db
vit
use vit
already on db vit
use monday
switched to db monday
db.createCollection("Student")
{ ok: 1 }
show collections
Student
db.createCollection("Results")
{ ok: 1 }
show collections
Results
Student
db.Results.drop()
true
show automationNotices
null
show collections
Student
db.Student.insertOne({name : 'Isha' , location : 'Agra'})
{
  acknowledged: true,
  insertedId: ObjectId('67ddb69a114b3dd6162ae8ee')
}
db.Student.insertOne({name : 'barkha&Rishabh' , location : 'Agra'})
{
  acknowledged: true,
  insertedId: ObjectId('67ddb6fa114b3dd6162ae8ef')
}
db.Student.find()
{
  _id: ObjectId('67ddb69a114b3dd6162ae8ee'),
  name: 'Isha',
  location: 'Agra'
}
{
  _id: ObjectId('67ddb6fa114b3dd6162ae8ef'),
  name: 'barkha&Rishabh',
  location: 'Agra'
}
db.Student.deleteOne({name : 'Isha'})
{
  acknowledged: true,
  deletedCount: 1
}
db.Student.find()
{
  _id: ObjectId('67ddb6fa114b3dd6162ae8ef'),
  name: 'barkha&Rishabh',
  location: 'Agra'
}
monday


# 25-Feb-2025--> Day 22 : Mongodb data types, InsertOne & InsertMany and Update functions

